<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1658213278369" id="c0a80c018215103481821536a2a1000d" language="beanshell" modified="1681117374417" name="R1-Preiterate" type="PreIterate">
  <Description>This rule is called before the connector processes the data in a file.</Description>
  <Signature returnType="void">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being iterated.
        </Description>
      </Argument>
      <Argument name="schema">
        <Description>
          Schema representing the data being iterated.
        </Description>
      </Argument>
      <Argument name="stats">
        <Description>
          A map passed by the connector of the stats for the file about to be iterated.
          Contains keys:
            fileName : (String) filename of the file about to be processed
            absolutePath : (String) absolute filename
            length : (Long) length in bytes
            lastModified : (Long) last time the file was updated Java GMT
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>
import java.io.IOException;
import java.util.*;
import java.io.File;
import java.io.FileReader;
import java.util.List;
import java.util.stream.Stream;
import java.nio.file;
import java.nio.file.Path;
import java.nio.file.Paths;
  
  import java.io.*;
  import java.io.BufferedReader;
  import java.io.ByteArrayInputStream;
  import java.io.FileReader;
  import java.io.InputStream;
  
String stringFilepath = application.getAttributeValue("file");//Get file path from applivation 
Path path = Paths.get(stringFilepath);
Path fileName = path.getFileName();
String connectorfilename = fileName.toString(); 
String directoryPath = new File(stringFilepath).getParent(); 
StringBuilder strbulider = new StringBuilder();
stringFilepath=directoryPath.replace("\\","\\\\");

File folder = new File(stringFilepath);
   File[] fileNames = folder.listFiles();
  if(fileNames != null){
    for(File file : fileNames){      
      Path path1 = Paths.get(file.toString());
      Path fileName1 = path1.getFileName();
      String fileforName=  fileName1.toString();
      if(fileName1.toString().equals(connectorfilename))
      {
      	//System.out.println("This is connector file::"+file);
        BufferedReader br = new BufferedReader(new FileReader(file.toString()));        
        while ((line = br.readLine()) != null)   
        {  
          strbulider.append(line+"\n");
        }
      }
      else
      {
     String line = "";  
		 String splitBy = "&amp;"; 	
		 String strEmpid="";
		 String strRemFilds="";
		
		Map Emp = new HashMap();
		
		BufferedReader br = new BufferedReader(new FileReader(file.toString()));  
		//List hrdlist = new ArrayList();
		//int intcnt =0;
		//hrdlist.clear();
		//Emp.clear();
		while ((line = br.readLine()) != null)   
		{  
      strbulider.append(line+"\n");
      
			/*String[] employee = line.split(splitBy);  
			if(intcnt==0)
			{			
				hrdlist = Arrays.asList(employee);
			}
			intcnt++;
			List currentRow  = Arrays.asList(employee);
			
			Map eachRowMap = new HashMap();
			for(int i = 0; i >= currentRow.size()-1; i++)
			{
				eachRowMap.put(hrdlist.get(i), currentRow.get(i));				
			}			
		  Emp.put(currentRow.get(0),currentRow);	*/
     
    }
       // System.out.println(strbulider.toString());   
        }
      } 
    
    }
   InputStream isr =  new ByteArrayInputStream(strbulider.toString().getBytes());
   return isr;  
  </Source>
</Rule>
