<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow created="1689151266767" explicitTransitions="true" id="c0a81db389431da181894942dfcf09e2" name="Domain and Service Account Creation">
  <Variable initializer="true" name="transient"/>
  <Variable initializer="true" name="trace">
    <Description>Used for debugging this workflow and when set to true trace will be sent to stdout.</Description>
  </Variable>
  <Variable initializer="adUserCreate" name="flow"/>
  <Variable name="approvalSet">
    <Description>
      This attributes is set during the "Build Approval Set" step,
      which builds this list by going through the ProvisioningPlan
      to build the line items that need to be approved,

      This variable includes all ApprovalItems that are part of
      the request process and is updated during the AfterScript
      of the approval process by assimilating the decisions
      and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable name="launcher">
    <Description>The name of the identity.</Description>
    <Script>
      <Source>
        import sailpoint.object.Identity;
        
        String userName = context.getUserName();                
        return userName;        
      </Source>
    </Script>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover"/>
  <Variable initializer="true" name="transient"/>
  <Variable name="managerEmail"/>
  <Variable name="managerApprover"/>
  <Variable name="adminApprover"/>
  <Variable name="infrastructureApprover"/>
  <Variable name="adminApproverEmail"/>
  <Variable name="infraApproverEmail"/>
  <Variable name="descriptionInAD"/>
  <Variable name="firstName"/>
  <Variable name="lastName"/>
  <Variable name="managerID"/>
  <Variable name="managerEmail"/>
  <Variable name="infraPersonApprover"/>
  <Variable name="infraPersonApproverEmail"/>
  <Variable name="thirdLevelApprover"/>
  <Variable name="thirdLevelApproverEmail"/>
  <Variable name="itHeadApprover"/>
  <Variable name="itHeadApproverEmail"/>
  <Description>
      A String that specifies the name of the Identity that will    
      can't be resolved. Example if the scheme is "owner" and the
      application doesn't specify and owner.
    </Description>
  <Step icon="Start" name="Start" posX="11" posY="11">
    <Transition to="Account Creation Request Form"/>
  </Step>
  <Step icon="Default" name="Account Creation Request Form" posX="146" posY="20">
    <Approval owner="ref:launcher" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess">
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="Account Creation Request Form"/>
      <Arg name="workItemDescription" value="User Account Request"/>
    </Approval>
    <Transition to="Admin Review Information"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="575" posY="35"/>
  <Step icon="Default" name="Admin Review Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;      
       
        if(launcher!=null){           
                
          String adminReviewer = null;
          String adminEmail = null;
                    
          if(region !=null &amp;&amp; region.equalsIgnoreCase("United Arab Emirates")){
    		  adminReviewer="Ahmed Kapany";
          adminEmail = "akapany@americana-food.com";
          }
          
          if(region !=null &amp;&amp; region.equalsIgnoreCase("Qatar")){
    			adminReviewer="Imran Shaikh"; 
        	adminEmail = "ishaikh@americana-food.com";
          }     
         
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("United Arab Emirates")){
    		  adminReviewer="Ahmed Kapany";
          adminEmail = "akapany@americana-food.com";
          }
          
          if(serviceregion !=null &amp;&amp; serviceregion.equalsIgnoreCase("Qatar")){
    		  adminReviewer="Imran Shaikh";
          adminEmail = "ishaikh@americana-food.com";
          }    
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("United Arab Emirates")){
    		  adminReviewer="Ahmed Kapany";
          adminEmail = "akapany@americana-food.com";
          }
          
          if(servicenewuserRegion !=null &amp;&amp; servicenewuserRegion.equalsIgnoreCase("Qatar")){
    		  adminReviewer="Imran Shaikh";
          adminEmail = "ishaikh@americana-food.com";
          }    
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("United Arab Emirates")){
    		  adminReviewer="Ahmed Kapany";
          adminEmail = "akapany@americana-food.com";
          }
          
          if(newuserRegion !=null &amp;&amp; newuserRegion.equalsIgnoreCase("Qatar")){
    		  adminReviewer="Imran Shaikh";
          adminEmail = "ishaikh@americana-food.com";
          }   
        
        Identity adminId=context.getObjectByName(Identity.class, adminReviewer);
        //*KPK to provide correct value later String adminEmail = adminId.getEmail();
        
        
        wfcontext.setVariable("adminApprover",adminReviewer);
        wfcontext.setVariable("adminApproverEmail",adminEmail);
        }
 
        else{
        wfcontext.setVariable("adminReviewer","spadmin");        
        }       
      </Source>
    </Script>
    <Transition to="Send Email for Admin Review"/>
  </Step>
  <Step icon="Task" name="Send Email for Admin Review">
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();
        
        
        if (emailTemplate != null) {
       
			  toAddresses.add(adminApproverEmail);
                
        variables.put("identityName",launcher);
               
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
        context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Admin Review Form"/>
  </Step>
  <Step icon="Default" name="Admin Review Form" posX="333" posY="31">
    <Approval name="Admin Review Form" owner="ref:adminApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="domainGroup,selectRegion">
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="Admin Review Form"/>
      <Arg name="workItemDescription" value="Admin Review Form"/>
      <Arg name="selectingAccount" value="ref:selectingAccount"/>
      <Arg name="userSelection" value="ref:userSelection"/>
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount"/>
      <Arg name="genericAccount" value="ref:genericAccount"/>
      <Arg name="preferredAccountName" value="ref:preferredAccountName"/>
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount"/>
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName"/>
      <Arg name="tempAccount" value="ref:tempAccount"/>
      <Arg name="startDate" value="ref:startDate"/>
      <Arg name="endDate" value="ref:endDate"/>
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount"/>
      <Arg name="startDateService" value="ref:startDateService"/>
      <Arg name="endDateService" value="ref:endDateService"/>
      <Arg name="requesterEmailId" value="ref:requesterEmailId"/>
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount"/>
      <Arg name="region" value="ref:region"/>
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess"/>
      <Arg name="justificationforAccess" value="ref:justificationforAccess"/>
      <Arg name="requesterFirstName" value="ref:requesterFirstName"/>
      <Arg name="requesterlastName" value="ref:requesterlastName"/>
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId"/>
      <Arg name="newuserRegion" value="ref:newuserRegion"/>
      <Arg name="serverAccess" value="ref:serverAccess"/>
      <Arg name="privilaged" value="ref:privilaged"/>
      <Arg name="jstAccess" value="ref:jstAccess"/>
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser"/>
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount"/>
      <Arg name="serviceregion" value="ref:serviceregion"/>
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess"/>
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess"/>
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName"/>
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName"/>
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId"/>
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion"/>
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess"/>
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged"/>
      <Arg name="servicejstAccess" value="ref:servicejstAccess"/>
    </Approval>
    <Transition to="Manager Information" when="approved"/>
    <Transition to="Send Rejection Email" when="rejected"/>
  </Step>
  <Step icon="Default" name="Manager Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
                              
        if(launcher!=null){         
        
        Identity identityId=context.getObjectByName(Identity.class, launcher);                
        Identity managerId=identityId.getManager();                
                
        if(managerId!=null){
        String strManager=managerId.getName();
        String managerEmail = managerId.getEmail();
                               
        wfcontext.setVariable("managerApprover",strManager);
        wfcontext.setVariable("managerEmail",managerEmail);    
        wfcontext.setVariable("managerID",managerId);        
        }
        else{
        wfcontext.setVariable("managerApprover","spadmin");        
        }
        }            
      </Source>
    </Script>
    <Transition to="Send Email To Line Manager"/>
  </Step>
  <Step icon="Task" name="Send Email To Line Manager">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(managerEmail);
                
        variables.put("identityName",launcher);               
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
        context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Line Manager Approval"/>
  </Step>
  <Step icon="Default" name="Line Manager Approval" posX="448" posY="36">
    <Approval name="Line Manager Approval" owner="ref:managerApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;


          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();
          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()>0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {          
		  		aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);

          wfcontext.setVariable("approvalSet", approvalSet); 
          }          

          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);       
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="First Level Approval - Line Manager"/>
      <Arg name="workItemDescription" value="First Level Approval - Line Manager"/>
      <Arg name="selectingAccount" value="ref:selectingAccount"/>
      <Arg name="userSelection" value="ref:userSelection"/>
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount"/>
      <Arg name="genericAccount" value="ref:genericAccount"/>
      <Arg name="preferredAccountName" value="ref:preferredAccountName"/>
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount"/>
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName"/>
      <Arg name="tempAccount" value="ref:tempAccount"/>
      <Arg name="startDate" value="ref:startDate"/>
      <Arg name="endDate" value="ref:endDate"/>
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount"/>
      <Arg name="startDateService" value="ref:startDateService"/>
      <Arg name="endDateService" value="ref:endDateService"/>
      <Arg name="requesterEmailId" value="ref:requesterEmailId"/>
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount"/>
      <Arg name="region" value="ref:region"/>
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess"/>
      <Arg name="justificationforAccess" value="ref:justificationforAccess"/>
      <Arg name="requesterFirstName" value="ref:requesterFirstName"/>
      <Arg name="requesterlastName" value="ref:requesterlastName"/>
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId"/>
      <Arg name="newuserRegion" value="ref:newuserRegion"/>
      <Arg name="serverAccess" value="ref:serverAccess"/>
      <Arg name="privilaged" value="ref:privilaged"/>
      <Arg name="jstAccess" value="ref:jstAccess"/>
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser"/>
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount"/>
      <Arg name="serviceregion" value="ref:serviceregion"/>
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess"/>
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess"/>
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName"/>
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName"/>
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId"/>
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion"/>
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess"/>
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged"/>
      <Arg name="servicejstAccess" value="ref:servicejstAccess"/>
      <Arg name="domainGroup" value="ref:domainGroup"/>
      <Arg name="selectRegion" value="ref:selectRegion"/>
    </Approval>
    <Transition to="Infra Consern Person Information" when="approved"/>
    <Transition to="Send Rejection Email" when="rejected"/>
  </Step>
  <Step icon="Default" name="Infra Consern Person Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
                              
        if(launcher!=null){                                        
        wfcontext.setVariable("infraPersonApprover","kavitha kumar");
        wfcontext.setVariable("infraPersonApproverEmail","kpkumar@americana-food.com");                 
        }
        else{
        wfcontext.setVariable("infraPersonApprover","spadmin");        
        }                 
      </Source>
    </Script>
    <Transition to="Send Email To Infra Person Approver"/>
  </Step>
  <Step icon="Task" name="Send Email To Infra Person Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
		import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
		    toAddresses.add(infraPersonApproverEmail);
                
        variables.put("identityName",launcher);               
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
        context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Infra Consern Person Approval"/>
  </Step>
  <Step icon="Default" name="Infra Consern Person Approval" posX="448" posY="36">
    <Approval name="Infra Consern Person Approval" owner="ref:infraPersonApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();


          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()>0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);

          }
          }
          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);

          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);             
        </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="Second Level Approval - Infrastructure"/>
      <Arg name="workItemDescription" value="Second Level Approval - Infrastructure"/>
      <Arg name="selectingAccount" value="ref:selectingAccount"/>
      <Arg name="userSelection" value="ref:userSelection"/>
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount"/>
      <Arg name="genericAccount" value="ref:genericAccount"/>
      <Arg name="preferredAccountName" value="ref:preferredAccountName"/>
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount"/>
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName"/>
      <Arg name="tempAccount" value="ref:tempAccount"/>
      <Arg name="startDate" value="ref:startDate"/>
      <Arg name="endDate" value="ref:endDate"/>
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount"/>
      <Arg name="startDateService" value="ref:startDateService"/>
      <Arg name="endDateService" value="ref:endDateService"/>
      <Arg name="requesterEmailId" value="ref:requesterEmailId"/>
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount"/>
      <Arg name="region" value="ref:region"/>
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess"/>
      <Arg name="justificationforAccess" value="ref:justificationforAccess"/>
      <Arg name="requesterFirstName" value="ref:requesterFirstName"/>
      <Arg name="requesterlastName" value="ref:requesterlastName"/>
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId"/>
      <Arg name="newuserRegion" value="ref:newuserRegion"/>
      <Arg name="serverAccess" value="ref:serverAccess"/>
      <Arg name="privilaged" value="ref:privilaged"/>
      <Arg name="jstAccess" value="ref:jstAccess"/>
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser"/>
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount"/>
      <Arg name="serviceregion" value="ref:serviceregion"/>
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess"/>
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess"/>
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName"/>
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName"/>
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId"/>
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion"/>
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess"/>
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged"/>
      <Arg name="servicejstAccess" value="ref:servicejstAccess"/>
      <Arg name="domainGroup" value="ref:domainGroup"/>
      <Arg name="selectRegion" value="ref:selectRegion"/>
    </Approval>
    <Transition to="Third Level Approval Information" when="approved"/>
    <Transition to="Send Rejection Email" when="rejected"/>
  </Step>
  <Step icon="Default" name="Third Level Approval Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
		
        if(launcher!=null){         		
        wfcontext.setVariable("thirdLevelApprover","George Perdikouris");
        wfcontext.setVariable("thirdLevelApproverEmail","gperdikouris@americana-food.com");            
        }
        else{
        wfcontext.setVariable("thirdLevelApprover","spadmin");        
        }                 
      </Source>
    </Script>
    <Transition to="Send Email To Third Level Approver"/>
  </Step>
  <Step icon="Task" name="Send Email To Third Level Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(thirdLevelApproverEmail);
                
        variables.put("identityName",launcher);               
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
        context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="Third Level Approvals"/>
  </Step>
  <Step icon="Default" name="Third Level Approvals" posX="448" posY="36">
    <Approval name="Third Level Approvals" owner="ref:thirdLevelApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()>0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="Third Level Approval - Director"/>
      <Arg name="workItemDescription" value="Third Level Approval - Director"/>
      <Arg name="selectingAccount" value="ref:selectingAccount"/>
      <Arg name="userSelection" value="ref:userSelection"/>
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount"/>
      <Arg name="genericAccount" value="ref:genericAccount"/>
      <Arg name="preferredAccountName" value="ref:preferredAccountName"/>
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount"/>
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName"/>
      <Arg name="tempAccount" value="ref:tempAccount"/>
      <Arg name="startDate" value="ref:startDate"/>
      <Arg name="endDate" value="ref:endDate"/>
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount"/>
      <Arg name="startDateService" value="ref:startDateService"/>
      <Arg name="endDateService" value="ref:endDateService"/>
      <Arg name="requesterEmailId" value="ref:requesterEmailId"/>
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount"/>
      <Arg name="region" value="ref:region"/>
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess"/>
      <Arg name="justificationforAccess" value="ref:justificationforAccess"/>
      <Arg name="requesterFirstName" value="ref:requesterFirstName"/>
      <Arg name="requesterlastName" value="ref:requesterlastName"/>
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId"/>
      <Arg name="newuserRegion" value="ref:newuserRegion"/>
      <Arg name="serverAccess" value="ref:serverAccess"/>
      <Arg name="privilaged" value="ref:privilaged"/>
      <Arg name="jstAccess" value="ref:jstAccess"/>
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser"/>
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount"/>
      <Arg name="serviceregion" value="ref:serviceregion"/>
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess"/>
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess"/>
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName"/>
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName"/>
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId"/>
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion"/>
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess"/>
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged"/>
      <Arg name="servicejstAccess" value="ref:servicejstAccess"/>
      <Arg name="domainGroup" value="ref:domainGroup"/>
      <Arg name="selectRegion" value="ref:selectRegion"/>
    </Approval>
    <Transition to="IT Head Approval Information" when="approved"/>
    <Transition to="Send Rejection Email" when="rejected"/>
  </Step>
  <Step icon="Default" name="IT Head Approval Information" posX="904" posY="10">
    <Script>
      <Source>
        import sailpoint.object.Identity;
		
        if(launcher!=null){          		
        wfcontext.setVariable("itHeadApprover","Ashish Krishna");
        wfcontext.setVariable("itHeadApproverEmail","akrishna@americana-food.com");            
        }
        else{
        wfcontext.setVariable("itHeadApprover","spadmin");        
        }           
      </Source>
    </Script>
    <Transition to="Send Email To IT Head Approver"/>
  </Step>
  <Step icon="Task" name="Send Email To IT Head Approver">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
				import sailpoint.object.*;
        
        
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-AdminReview");  
        List toAddresses=new ArrayList();
        
         HashMap variables = new HashMap();        
        
        if (emailTemplate != null) {
       
				toAddresses.add(itHeadApproverEmail);
                
        variables.put("identityName",launcher);               
        
        EmailOptions ops = new EmailOptions(toAddresses, variables);
              
        context.sendEmailNotification(emailTemplate, ops);
            }
    </Source>
    </Script>
    <Transition to="IT Head Approval"/>
  </Step>
  <Step icon="Default" name="IT Head Approval" posX="448" posY="36">
    <Approval name="IT Head Level Approval" owner="ref:itHeadApprover" return="approvalSet,param,selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion" send="selectingAccount,userSelection,userSelectionforServiceAccount,genericAccount,preferredAccountName,servicegenericAccount,servicepreferredAccountName,tempAccount,startDate,endDate,tempServiceAccount,startDateService,endDateService,requesterEmailId,exestingAdminAccount,region,requestforServerAccess,justificationforAccess,requesterFirstName,requesterlastName,newUserrequesterEmailId,newuserRegion,serverAccess,privilaged,jstAccess,servicerequesterEmailIdofExestinguser,serviceexestingAdminAccount,serviceregion,servicerequestforServerAccess,servicejustificationforAccess,servicerequesterFirstName,servicerequesterlastName,servicerequesterEmailId,servicenewuserRegion,serviceserverAccess,serviceprivilaged,servicejstAccess,domainGroup,selectRegion">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;
          import sailpoint.object.ApprovalSet;
          import sailpoint.object.ApprovalItem;
          import java.util.ArrayList;
          import java.util.List;
          import sailpoint.object.WorkItem.State;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          import sailpoint.object.Comment;
          import sailpoint.object.WorkItem;

          if ( item == null ) {
          return;
          }
          List commentsList = new ArrayList();

          if(item.getApprovalSet() != null &amp;&amp; item.getApprovalSet().getItems().size()>0 ) {

          //item.getApprovalSet().getItems().get(0).setComments(commentsList);
          for(ApprovalItem aItem : item.getApprovalSet().getItems()) {
          aItem.setState(State.Finished);
          }
          }

          if(approvalSet != null) {
          assimilateWorkItemApprovalSet(wfcontext, item, approvalSet);
          auditDecisions(item);
          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext,
          approvalSet);
          wfcontext.setVariable("approvalSet", approvalSet); 
          }
          IdentityRequestLibrary identityRequestLibrary = new IdentityRequestLibrary();
          identityRequestLibrary.refreshIdentityRequestAfterApproval(wfcontext);
      </Source>
      </AfterScript>
      <Arg name="workItemType" value="Form"/>
      <Arg name="workItemForm" value="Fourth Level Approval - IT Head"/>
      <Arg name="workItemDescription" value="Fourth Level Approval - IT Head"/>
      <Arg name="selectingAccount" value="ref:selectingAccount"/>
      <Arg name="userSelection" value="ref:userSelection"/>
      <Arg name="userSelectionforServiceAccount" value="ref:userSelectionforServiceAccount"/>
      <Arg name="genericAccount" value="ref:genericAccount"/>
      <Arg name="preferredAccountName" value="ref:preferredAccountName"/>
      <Arg name="servicegenericAccount" value="ref:servicegenericAccount"/>
      <Arg name="servicepreferredAccountName" value="ref:servicepreferredAccountName"/>
      <Arg name="tempAccount" value="ref:tempAccount"/>
      <Arg name="startDate" value="ref:startDate"/>
      <Arg name="endDate" value="ref:endDate"/>
      <Arg name="tempServiceAccount" value="ref:tempServiceAccount"/>
      <Arg name="startDateService" value="ref:startDateService"/>
      <Arg name="endDateService" value="ref:endDateService"/>
      <Arg name="requesterEmailId" value="ref:requesterEmailId"/>
      <Arg name="exestingAdminAccount" value="ref:exestingAdminAccount"/>
      <Arg name="region" value="ref:region"/>
      <Arg name="requestforServerAccess" value="ref:requestforServerAccess"/>
      <Arg name="justificationforAccess" value="ref:justificationforAccess"/>
      <Arg name="requesterFirstName" value="ref:requesterFirstName"/>
      <Arg name="requesterlastName" value="ref:requesterlastName"/>
      <Arg name="newUserrequesterEmailId" value="ref:newUserrequesterEmailId"/>
      <Arg name="newuserRegion" value="ref:newuserRegion"/>
      <Arg name="serverAccess" value="ref:serverAccess"/>
      <Arg name="privilaged" value="ref:privilaged"/>
      <Arg name="jstAccess" value="ref:jstAccess"/>
      <Arg name="servicerequesterEmailIdofExestinguser" value="ref:servicerequesterEmailIdofExestinguser"/>
      <Arg name="serviceexestingAdminAccount" value="ref:serviceexestingAdminAccount"/>
      <Arg name="serviceregion" value="ref:serviceregion"/>
      <Arg name="servicerequestforServerAccess" value="ref:servicerequestforServerAccess"/>
      <Arg name="servicejustificationforAccess" value="ref:servicejustificationforAccess"/>
      <Arg name="servicerequesterFirstName" value="ref:servicerequesterFirstName"/>
      <Arg name="servicerequesterlastName" value="ref:servicerequesterlastName"/>
      <Arg name="servicerequesterEmailId" value="ref:servicerequesterEmailId"/>
      <Arg name="servicenewuserRegion" value="ref:servicenewuserRegion"/>
      <Arg name="serviceserverAccess" value="ref:serviceserverAccess"/>
      <Arg name="serviceprivilaged" value="ref:serviceprivilaged"/>
      <Arg name="servicejstAccess" value="ref:servicejstAccess"/>
      <Arg name="domainGroup" value="ref:domainGroup"/>
      <Arg name="selectRegion" value="ref:selectRegion"/>
    </Approval>
    <Transition to="Identity Creation Domain Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Creation Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }

                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Identity Creation Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Identity Creation Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("New User")){       
         
          				return true ; 
          
                  }

                      else{        
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Domain Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){   
                    
          				return true ; 
          
                  }
                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Preparing Plan Service Account" when="approved">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Preparing Plan Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){   
         
          				return true ; 
          
                  }
                      else{     
          
                  return false;
          
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Default" name="Preparing Plan Domain Account" posX="279" posY="35" resultVariable="plan">
    <Script>
      <Source>
        
        import sailpoint.object.Application;
				import sailpoint.api.IdentityService;
        import sailpoint.object.Identity;
        import sailpoint.object.Custom;
        import sailpoint.object.Link;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Util;
        
        Identity identity = null;
				
				if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("Existing User")){     
        identity = context.getObjectById(Identity.class, exestingAdminAccount);    
        wfcontext.setVariable("identityName", identity.getName());		         
				}		             
        
   			ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identity);        
                   
        AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("Active Directory");     // pass application name
        accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=UAE-Office,OU=Americana Office,OU=Test HCM,OU=Americana Office,DC=Americana,DC=global");       
		
        accountRequest.setOperation(AccountRequest.Operation.Modify);
       
       List GroupList = new ArrayList ();
       GroupList.addAll(domainGroup);       
        
      // accountRequest.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Set, identity.getName()));                            
       accountRequest.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list      
       
        plan.add(accountRequest);
        
        return plan;        
       
        </Source>
    </Script>
    <Transition to="Initialize AR"/>
  </Step>
  <Step icon="Default" name="Preparing Plan Service Account" posX="279" posY="35" resultVariable="plan">
    <Script>
      <Source>
        
        import sailpoint.object.Application;
				import sailpoint.api.IdentityService;
        import sailpoint.object.Identity;
        import sailpoint.object.Custom;
        import sailpoint.object.Link;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.tools.GeneralException;
        import sailpoint.tools.Util;
        
        Identity identity = null;
				        
      	if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("Existing User")){  
        identity = context.getObjectById(Identity.class, serviceexestingAdminAccount);  
     	 	wfcontext.setVariable("identityName", identity.getName());		        
				}		
        
   			ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identity);        
                   
        AccountRequest accountRequest = new AccountRequest();
        accountRequest.setApplication("Active Directory");     // pass application name
        accountRequest.setNativeIdentity("CN="+identity.getName()+",OU=UAE-Office,OU=Americana Office,OU=Test HCM,OU=Americana Office,DC=Americana,DC=global");       
                        
       accountRequest.setOperation(AccountRequest.Operation.Modify);
       
       List GroupList = new ArrayList ();
       GroupList.addAll(domainGroup);       
        
   //    accountRequest.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Set, identity.getName()));                       
       accountRequest.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list
       
	     plan.add(accountRequest);
        
        return plan;
		
        </Source>
    </Script>
    <Transition to="Initialize AR"/>
  </Step>
  <Step icon="Task" name="Initialize AR" posX="183" posY="12">
    <Arg name="flow" value="Account Creation"/>
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="identityDisplayName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="false"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into
      a project and checking policy violations.
    </Description>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" id="c0a81db3874f10c281874fd80d9c0037" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision" posX="516" posY="126">
    <Arg name="approvalScheme" value="none"/>
    <Arg name="identity">
      <Script>
        <Source>
    return wfcontext.getVariable("identityName");
          
      </Source>
      </Script>
    </Arg>
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="requestType" value="ref:requestType"/>
    <Arg name="approvalSet"/>
    <Arg name="flow" value="Account Creation"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="string:none"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");   // pass identity name   
      </Source>
      </Script>
    </Arg>
    <Arg name="identityDisplayName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");          
      </Source>
      </Script>
    </Arg>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>Call the standard subprocess that will process the 
        approval decisions and do provisioning.  This 
        includes calling any configured provisioning 
        connectors and building manual actions.</Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" id="c0a81db3874f10c281874fd80e1a003a" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step icon="Task" name="Complete Identity Request" posX="410" posY="10">
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="identity">
      <Script>
        <Source>
   				return wfcontext.getVariable("identityName");         
      </Source>
      </Script>
    </Arg>
    <Arg name="identityName">
      <Script>
        <Source>
    			return wfcontext.getVariable("identityName");          
      </Source>
      </Script>
    </Arg>
    <Arg name="project" value="ref:project"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Description>
        Call the standard subprocess that can audit/finalize the request.</Description>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="identityRequest" to="identityRequest"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" id="c0a81db3874f10c281874fd80e5a003b" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="Update Account Send Email Notification"/>
  </Step>
  <Step icon="Task" name="Update Account Send Email Notification">
    <Script>
      <Source>
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;			
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Account Creation Details Notification");
        List toAddresses=new ArrayList();
        
        HashMap variables = new HashMap();            
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("selectingAccount",selectingAccount);
        variables.put("userSelection",userSelection);
        variables.put("requesterEmailId",requesterEmailId);
        variables.put("exestingAdminAccount",exestingAdminAccount);
        
        variables.put("requestforServerAccess",requestforServerAccess);       
        variables.put("domainGroup",domainGroup);   
        variables.put("identityName",identityName);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(requesterEmailId);
        
        context.sendEmailNotification(template, ops);        
        }                  
        
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Domain Account Send Email Notification">
    <Script>
      <Source>
        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Domain Account Creation Details Notification");
        List toAddresses=new ArrayList();
        
        HashMap variables = new HashMap();   
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("selectingAccount",selectingAccount);
        variables.put("userSelection",userSelection);
        variables.put("requesterFirstName",requesterFirstName);
        variables.put("requesterlastName",requesterlastName);
        variables.put("newUserrequesterEmailId",newUserrequesterEmailId);
                
        variables.put("genericAccount",genericAccount);
        variables.put("preferredAccountName",preferredAccountName);
        variables.put("domainGroup",domainGroup);   
        variables.put("identityName",launcher);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(newUserrequesterEmailId);

        context.sendEmailNotification(template, ops); 
        }      
        
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Service Account Send Email Notification">
    <Script>
      <Source>

        import java.util.HashMap;
        import java.util.Map;

        import sailpoint.object.EmailTemplate;
        import sailpoint.object.Custom;
        import sailpoint.tools.Util; 
        import sailpoint.object.EmailOptions;
                      
        EmailTemplate template =context.getObjectByName(EmailTemplate.class, "Service Account Creation Details Notification");
        List toAddresses=new ArrayList();
        
        HashMap variables = new HashMap();    
        
        
        if (template != null) {             
                    
        toAddresses.add("rkumar@americana-food.com");
        toAddresses.add("skurian@americana-food.com");     
        
        variables.put("selectingAccount",selectingAccount);
        variables.put("userSelectionforServiceAccount",userSelectionforServiceAccount);
        variables.put("servicerequesterFirstName",servicerequesterFirstName);
        variables.put("servicerequesterlastName",servicerequesterlastName);
        variables.put("servicerequesterEmailId",servicerequesterEmailId);
                
        variables.put("servicegenericAccount",servicegenericAccount);
        variables.put("servicepreferredAccountName",servicepreferredAccountName);
        variables.put("domainGroup",domainGroup);      
        variables.put("identityName",launcher);     
   	
        EmailOptions ops = new EmailOptions(toAddresses, variables);
        ops.setCc(servicerequesterEmailId);

        context.sendEmailNotification(template, ops);  
    
        }                   
      </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Identity Creation Domain Account" posX="279" posY="35" resultVariable="identityName">
    <Script>
      <Source>
        
		import sailpoint.object.Identity;
    import java.util.*;
    import java.util.Date;
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;    
        
		String displayName = null;
        
    Identity id=new Identity();    
        
    String descriptionInAD = privilaged+","+jstAccess;
    wfcontext.setVariable("descriptionInAD",descriptionInAD);       
    wfcontext.setVariable("firstName",requesterFirstName);
  	wfcontext.setVariable("lastName",requesterlastName); 
    id.setFirstname(requesterFirstName);
    id.setLastname(requesterlastName);      
    id.setManager(managerID);  
    id.setAttribute("userType","Domain Account");        
        
    if (tempAccount !=null &amp;&amp; tempAccount.equalsIgnoreCase("Temporary Account")){
    DateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
    startDate = dateFormat.format(startDate);      
    id.setAttribute("startDate",startDate);      
    endDate = dateFormat.format(endDate);          
    id.setAttribute("endDate",endDate);
    }      
          
    if (selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; genericAccount.equalsIgnoreCase("Generic")){       
        if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		    displayName = "amd.ae"+"."+preferredAccountName;
        id.setDisplayName(displayName);
        id.setName(displayName);               
		}
        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		     displayName = "amd.qa"+"."+preferredAccountName;
         id.setDisplayName(displayName);
         id.setName(displayName);                
				}
        }    
      
    if (selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; genericAccount.equalsIgnoreCase("Named")){  
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		     displayName = "amd.ae"+"."+launcher;       
         id.setDisplayName(displayName);
         id.setName(displayName);      
		}
        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		 displayName = "amd.qa"+"."+launcher;
     id.setDisplayName(displayName);
     id.setName(displayName);   
				}
        }
         	
        context.saveObject(id);
        context.commitTransaction();
        
        identityName = id.getName();        
                    	
		    return id.getName();
       
        </Source>
    </Script>
    <Transition to="Account Provision Plan"/>
  </Step>
  <Step icon="Default" name="Identity Creation Service Account" posX="279" posY="35" resultVariable="identityName">
    <Script>
      <Source>
        
		import sailpoint.object.Identity;
    import java.util.*;
    import java.util.Date;
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;
       
		String displayName = null;
    
    Identity id=new Identity();
    
    String descriptionInAD = serviceprivilaged+","+servicejstAccess;    
    wfcontext.setVariable("descriptionInAD",descriptionInAD);       
    wfcontext.setVariable("firstName",servicerequesterFirstName);
  	wfcontext.setVariable("lastName",servicerequesterlastName); 
    id.setFirstname(servicerequesterFirstName);
    id.setLastname(servicerequesterlastName);
    id.setManager(managerID);  
    id.setAttribute("userType","Service Account");      
        
    if (tempServiceAccount !=null &amp;&amp; tempServiceAccount.equalsIgnoreCase("Temporary Account")){           
	  DateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
    startDateService = dateFormat.format(startDateService);      
    id.setAttribute("startDate",startDateService);     
    endDateService = dateFormat.format(endDateService);          
    id.setAttribute("endDate",endDateService);
    } 
     
    if (selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; servicegenericAccount.equalsIgnoreCase("Generic")){
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		     displayName = "ams.ae"+"."+servicepreferredAccountName;    
         id.setDisplayName(displayName);
         id.setName(displayName);      
		}
        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		 displayName = "ams.qa"+"."+servicepreferredAccountName;
     id.setDisplayName(displayName);
     id.setName(displayName);   
				}        
        }
        
    if (selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; servicegenericAccount.equalsIgnoreCase("Named")){         
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
    		 displayName = "ams.ae"+"."+launcher;
         id.setDisplayName(displayName);
         id.setName(displayName);       
		}
        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		 displayName = "ams.qa"+"."+launcher;    
     id.setDisplayName(displayName);
     id.setName(displayName); 
				}
        }
        	
        context.saveObject(id);
        context.commitTransaction();
        
        identityName = id.getName();
                           	
		    return id.getName();
       
        </Source>
    </Script>
    <Transition to="Account Provision Plan"/>
  </Step>
  <Step icon="Default" name="Account Provision Plan" posX="289" posY="37" resultVariable="plan">
    <Script>
      <Source>
        
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import sailpoint.object.*;

        import sailpoint.api.Provisioner;
        import sailpoint.api.*;

        import sailpoint.api.PasswordGenerator;
        import sailpoint.object.PasswordPolicy;
        import sailpoint.tools.Util;


        String policyName = "Americana-AD-PasswordPolicy";
        PasswordPolicy policyAD = context.getObjectByName(PasswordPolicy.class, policyName);
        String   password = new PasswordGenerator(context).generatePassword(policyAD);
        
        policyAD = null;
             
                    
		    Identity identityProvAct = null;		
               
        identityProvAct = context.getObjectByName(Identity.class, identityName);       
        wfcontext.setVariable("identityName", identityProvAct.getName());		        
        
		    ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(identityProvAct);        
                   
        AccountRequest accountRequestProv = new AccountRequest();
        accountRequestProv.setApplication("Active Directory");     // pass application name
		
        accountRequestProv.setOperation(AccountRequest.Operation.Create);
		
		  String displayName = null;
		
		if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("United Arab Emirates")){
		displayName = identityProvAct.getName();
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=UAE-Office,OU=Americana Office,OU=Test HCM,OU=Americana Office,DC=Americana,DC=global");            
		}
        
    if(selectRegion !=null &amp;&amp; selectRegion.equalsIgnoreCase("Qatar")){
		displayName = identityProvAct.getName();      
		accountRequestProv.setNativeIdentity("CN=" + displayName +",OU=Qatar-Office,OU=Americana Office,OU=Test HCM,OU=Americana Office,DC=Americana,DC=global");          
		}
		    accountRequestProv.add(new AttributeRequest("givenName", ProvisioningPlan.Operation.Add, firstName));
        accountRequestProv.add(new AttributeRequest("sn", ProvisioningPlan.Operation.Add, lastName));
        accountRequestProv.add(new AttributeRequest("sAMAccountName", ProvisioningPlan.Operation.Add, displayName));        
        accountRequestProv.add(new AttributeRequest("password", ProvisioningPlan.Operation.Add, password));
        accountRequestProv.add(new AttributeRequest("displayName", ProvisioningPlan.Operation.Add,  displayName));        
        accountRequestProv.add(new AttributeRequest("description", ProvisioningPlan.Operation.Add, descriptionInAD));                
                     
        List GroupList = new ArrayList ();
        GroupList.addAll(domainGroup);               
                          
        accountRequestProv.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,GroupList));	 // pass the Entitlements list
                  
        plan.add(accountRequestProv);
        
        return plan;  
        </Source>
    </Script>
    <Transition to="provisionLCM"/>
  </Step>
  <Step icon="Default" name="provisionLCM" posX="444" posY="10">
    <Arg name="approvalScheme" value="none"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="flow" value="ref:flow"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" id="c0a81db3874f10c281874fd80f27003e" name="LCM Provisioning"/>
    </WorkflowRef>
    <Transition to="Domain Account Send Email Notification">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Send Mail Creation Domain Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Domain Account") &amp;&amp; userSelection.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }

                      else{                      
                  return false;
                  }
      </Source>
      </Script>
    </Transition>
    <Transition to="Service Account Send Email Notification">
      <Script>
        <Source>
                  import sailpoint.tools.Util;                     
           	 
          				System.out.println("Inside Send Mail Creation Service Account");
                  
                  if(selectingAccount.equalsIgnoreCase("Service Account") &amp;&amp; userSelectionforServiceAccount.equalsIgnoreCase("New User")){       
         
          				return true ; 
                  }

                      else{                      
                  return false;
                  }
      </Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Task" name="Send Rejection Email">
    <Script>
      <Source>
        import sailpoint.object.EmailOptions;
        import sailpoint.object.EmailTemplate;
        import sailpoint.object.*;        
        
        List toAddresses=new ArrayList();
        EmailTemplate emailTemplate = context.getObjectByName(EmailTemplate.class, "Americana-AccountCreation-Rejection Email");  
        String emailId = null;
        
        if (emailTemplate != null) {
            try{
        
        	if(requesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
          
          if(newUserrequesterEmailId !=null){
    		  emailId=requesterEmailId;
          }
                      
          if(servicerequesterEmailIdofExestinguser !=null){
    		  emailId=requesterEmailId;
          }     
          
          if(servicerequesterEmailId !=null){
    		  emailId=requesterEmailId;
          }          
        			toAddresses.add(requesterEmailId);  
        			// KPK to review later toAddresses.add(managerEmail);
           
              HashMap variables = null;
              variables = new HashMap();
                    
        			variables.put("identityName",identityName);
              EmailOptions ops = new EmailOptions(toAddresses, variables);
              
              context.sendEmailNotification(emailTemplate, ops);
            }
            catch(Exception e){
              throw new GeneralException(e);
            }
        }
    </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
</Workflow>
